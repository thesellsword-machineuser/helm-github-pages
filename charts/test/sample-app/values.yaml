common: &common
  envFrom:
    sample-app-env:
      configMapRef:
        name: sample-app-env

configmaps:
  sample-app-env:
    metadata:
      name: sample-app-env
      helm_sh_annotations:
        helm_sh_hook: pre-install
        helm_sh_hook_weight: "-1"
        helm_sh_hook_delete_policy: before-hook-creation
    data:
      - KEY1:
          name: KEY1
          value: false
      - KEY2:
          name: KEY2
          value: "false"
      - KEY3:
          name: KEY3
          value: '"false"'

jobs:
  sample-app-job:
    metadata:
      name: sample-app-job
      annotations:
        key1: value1
        key2: value2
      helm_sh_annotations:
        helm_sh_hook: pre-install
        helm_sh_hook_weight: "0"
        helm_sh_hook_delete_policy: before-hook-creation
    spec:
      parallelism: 1
      completions: 1
      backoffLimit: 0
      template:
        spec:
          restartPolicy: Never
          tolerations:
            migration-noschedule:
              key: "karpenter"
              operator: "Equal"
              value: "migration"
              effect: "NoSchedule"
          nodeSelector:
            karpenter_migration: "true"
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      key: value
                  topologyKey: "kubernetes.io/hostname"
          topologySpreadConstraints:
            constraint1:
              maxSkew: 2
              topologyKey: "kubernetes.io/hostname"
              whenUnsatisfiable: DoNotSchedule
              nodeAffinityPolicy: Honour
              labelSelector:
                matchLabels:
                  key: value
            constraint2:
              maxSkew: 2
              topologyKey: "kubernetes.io/zone"
              whenUnsatisfiable: DoNotSchedule
              nodeAffinityPolicy: Honour
              labelSelector:
                matchLabels:
                  key: value
          containers:
            sample-app-job:
              <<: *common
              name: sample-app-job
              image:
                repository: sample-app
                tag: latest
                pullPolicy: Always
                command: ["/bin/sh"]
                args:
                  - "-c"
                  - "echo \"Hello World\""
              resources:
                requests:
                  cpu: "1"
                  memory: 1024Mi
                limits:
                  cpu: "1"
                  memory: 1024Mi
  sample-app-job-2:
    metadata:
      name: sample-app-job-2
      annotations:
        key1: value1
        key2: value2
      helm_sh_annotations:
        helm_sh_hook: pre-install
        helm_sh_hook_weight: "0"
        helm_sh_hook_delete_policy: before-hook-creation
    spec:
      parallelism: 1
      completions: 1
      backoffLimit: 0
      template:
        spec:
          restartPolicy: Never
          containers:
            sample-app-job-2:
              <<: *common
              name: sample-app-job
              image:
                repository: sample-app
                tag: latest
                pullPolicy: Always
                command: ["/bin/sh"]
                args:
                  - "-c"
                  - "echo \"Hello World\""
              resources:
                requests:
                  cpu: "1"
                  memory: 1024Mi
                limits:
                  cpu: "1"
                  memory: 1024Mi


deployments:
  sample-app:
    metadata:
      name: sample-app
      labels:
        key: value
      annotations:
        prefix.svc.com/annotation1: 'true'
        prefix.svc.com/annotation2: 'false'
    podAnnotations:
      prefix.svc.com/annotation3: 'true'
      prefix.svc.com/annotation4: 'false'
    replicaCount: 3
    deploymentStrategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 10%
    restartPolicy: Always
    serviceAccountName: svc-acct-name
    containers:
      sample-app:
        <<: *common
        env:
          ENV1:
            name: ENV1
            value: VALUE1
          ENV2:
            name: ENV2
            value: VALUE2
        envOverrideOne:
          ENV3:
            name: ENV3
            value: VALUE3
          ENV4:
            name: ENV4
            value: VALUE4
        envOverrideTwo:
          ENV5:
            name: ENV5
            value: VALUE5
          ENV6:
            name: ENV6
            value: VALUE6
        name: sample-app
        image:
          repository: sample-app
          tag: latest
          pullPolicy: Always
        ports:
          https:
            name: https
            protocol: TCP
            containerPort: "3000"
        readinessProbe:
          httpGet:
            path: /upcheck
            port: 3000
            scheme: HTTP
          periodSeconds: 30
          # give enough time for the system
          # to load the model and initialize
          initialDelaySeconds: 10
          failureThreshold: 1
        livenessProbe:
          httpGet:
            path: /upcheck
            port: 3000
            scheme: HTTP
          periodSeconds: 30
          # give enough time for the system
          # to load the model and initialize
          initialDelaySeconds: 10
          failureThreshold: 5
        resources:
          requests:
            cpu: "1"
            memory: 2048Mi
          limits:
            cpu: "1"
            memory: 4096Mi
  sample-app-2:
    metadata:
      name: sample-app-2
      labels:
        key: value
      annotations:
        prefix.svc.com/annotation1: 'true'
        prefix.svc.com/annotation2: 'false'
    replicaCount: 3
    deploymentStrategy:
      type: RollingUpdate
    restartPolicy: Always
    tolerations:
      migration-noschedule:
        key: "karpenter"
        operator: "Equal"
        value: "migration"
        effect: "NoSchedule"
    nodeSelector:
      karpenter_migration: "true"
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                key: value
            topologyKey: "kubernetes.io/hostname"
    topologySpreadConstraints:
      constraint1:
        maxSkew: 2
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            key: value
      constraint2:
        maxSkew: 2
        topologyKey: "kubernetes.io/zone"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            key: value
    containers:
      sample-app-2:
        <<: *common
        envOverrideOne:
          ENV1:
            name: ENV1
            value: VALUE1
          ENV2:
            name: ENV2
            value: VALUE2
        name: sample-app
        image:
          repository: sample-app
          tag: latest
          pullPolicy: Always
        ports:
          https:
            name: https
            protocol: TCP
            containerPort: "3000"
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - command arg1 arg2 arg3
          periodSeconds: 60
          # give enough time for the system
          # to load the model and initialize
          initialDelaySeconds: 30
          failureThreshold: 2
        livenessProbe:
          tcpSocket:
            port: 8080
          periodSeconds: 60
          timeoutSeconds: 10
          # give enough time for the system
          # to load the model and initialize
          initialDelaySeconds: 30
          failureThreshold: 2
        resources:
          requests:
            cpu: "1"
            memory: 2048Mi
          limits:
            cpu: "1"
            memory: 4096Mi


ingress:
  enabled: true
  metadata:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      acme.cert-manager.io/http01-edit-in-place: "true"
  tls:
    - hosts:
        - 'sample-app.example.com'
      secretName: ingress-tls-secret
  rules:
    - host: 'sample-app.example.com'
      http:
        paths:
          - path:
            backend:
              serviceName: sample-app
              servicePort: 443

services:
  sample-app:
    selector:
      name: sample-app
    metadata:
      name: sample-app
    ports:
      - name: http
        port: "80"
        protocol: TCP
        targetPort: "3000"
  external-svc:
    metadata:
      name: external-svc
    type: ExternalName
    externalName: external.domain.com

serviceaccount:
  enabled: true
  metadata:
    name: sample-app
    annotations:
      eks.amazonaws.com/role-arn: <sample_role_arn>
